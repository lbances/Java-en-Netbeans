/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Formularios;

import BD.clsConectarBD;
import Clases.clsCliente;
import static java.awt.image.ImageObserver.HEIGHT;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lbanc
 */
public class frmCliente extends javax.swing.JFrame {

    /**
     * Creates new form frmCliente
     */
    public frmCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNombres = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtApellidos = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDPI = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtNIT = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        btnInsertar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setToolTipText("");
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Código");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));
        jPanel1.add(txtCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, 190, -1));

        jLabel2.setText("Nombres");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));
        jPanel1.add(txtNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 230, -1));

        jLabel3.setText("Apellidos:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 60, -1, -1));
        jPanel1.add(txtApellidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 60, 230, -1));

        jLabel5.setText("DPI:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, -1, -1));
        jPanel1.add(txtDPI, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, 230, -1));

        jLabel6.setText("Teléfono");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));
        jPanel1.add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 230, -1));

        jLabel7.setText("Dirección");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));
        jPanel1.add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 230, -1));

        jLabel8.setText("E-mail:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, -1, -1));
        jPanel1.add(txtNIT, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, 230, -1));

        btnBuscar.setText("....");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 20, 30, 20));

        jLabel4.setText("NIT:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 140, -1, -1));
        jPanel1.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, 230, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 640, 190));

        btnInsertar.setText("Insertar");
        btnInsertar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });
        getContentPane().add(btnInsertar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 610, 100, 102));

        btnModificar.setText("Modificar");
        btnModificar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 610, 100, 100));

        btnEliminar.setText("Eliminar");
        btnEliminar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 610, 100, 102));

        btnCancelar.setText("Cancelar");
        btnCancelar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 610, 100, 102));

        btnNuevo.setText("Nuevo");
        btnNuevo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 610, 100, 102));

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "DPI", "Nombres", "Apellidos", "Dirección", "E-mail", "Teléfono", "NIT"
            }
        ));
        tblClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblClientes);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 630, 244));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/farmacia.png"))); // NOI18N
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 470, 120));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        if ("".contentEquals(txtCodigo.getText())) {
            JOptionPane.showMessageDialog(null, "El campo Código no puede estar vacío.", "Error", HEIGHT);
        } else {
            EncontrarCliente(Integer.parseInt(txtCodigo.getText()));
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        // TODO add your handling code here:
        if ("".contentEquals(txtCodigo.getText())) {
            JOptionPane.showMessageDialog(null, "El campo Código no puede estar vacío.", "Error", HEIGHT);
        } else {
            if ("".contentEquals(txtDPI.getText())) {
                JOptionPane.showMessageDialog(null, "El campo DPI no puede estar vacío.", "Error", HEIGHT);
            } else {
                if ("".contentEquals(txtNombres.getText())) {
                    JOptionPane.showMessageDialog(null, "El campo Nombres no puede estar vacío.", "Error", HEIGHT);
                } else {
                    if ("".contentEquals(txtApellidos.getText())) {
                        JOptionPane.showMessageDialog(null, "El campo Apellidos no puede estar vacío.", "Error", HEIGHT);
                    } else {
                        if ("".contentEquals(txtDireccion.getText())) {
                            JOptionPane.showMessageDialog(null, "El campo Dirección no puede estar vacío.", "Error", HEIGHT);
                        } else {
                            if ("".contentEquals(txtEmail.getText())) {
                                JOptionPane.showMessageDialog(null, "El campo E-mail no puede estar vacío.", "Error", HEIGHT);
                            } else {
                                if ("".contentEquals(txtTelefono.getText())) {
                                    JOptionPane.showMessageDialog(null, "El campo Teléfono no puede estar vacío.", "Error", HEIGHT);
                                } else {
                                    if ("".contentEquals(txtNIT.getText())) {
                                        JOptionPane.showMessageDialog(null, "El campo NIT no puede estar vacío.", "Error", HEIGHT);
                                    } else {
                                        ///Aqui debemos de crear el Objeto Cliente con sus propiedades
                                        clsCliente miCliente = new clsCliente();
                                        miCliente.setCodigoCliente(Integer.parseInt(txtCodigo.getText()));
                                        miCliente.setDpiCliente(txtDPI.getText());
                                        miCliente.setNombresCliente(txtNombres.getText());
                                        miCliente.setApellidosCliente(txtApellidos.getText().toString());
                                        miCliente.setDireccionCliente(txtDireccion.getText());
                                        miCliente.setEmailCliente(txtEmail.getText());
                                        miCliente.setTelefonoCliente(txtTelefono.getText());
                                        miCliente.setNitCliente(txtNIT.getText());
                                        miCliente.Insertar();
                                        CargarDatosTabla();
                                        JOptionPane.showMessageDialog(null, "Cliente registrado correctamente", "Aviso", HEIGHT);
                                        LimpiarControles();

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        if ("".contentEquals(txtCodigo.getText())) {
            JOptionPane.showMessageDialog(null, "El campo Código no puede estar vacío.", "Error", HEIGHT);
        } else {
            if ("".contentEquals(txtDPI.getText())) {
                JOptionPane.showMessageDialog(null, "El campo DPI no puede estar vacío.", "Error", HEIGHT);
            } else {
                if ("".contentEquals(txtNombres.getText())) {
                    JOptionPane.showMessageDialog(null, "El campo Nombres no puede estar vacío.", "Error", HEIGHT);
                } else {
                    if ("".contentEquals(txtApellidos.getText())) {
                        JOptionPane.showMessageDialog(null, "El campo Apellidos no puede estar vacío.", "Error", HEIGHT);
                    } else {
                        if ("".contentEquals(txtDireccion.getText())) {
                            JOptionPane.showMessageDialog(null, "El campo Dirección no puede estar vacío.", "Error", HEIGHT);
                        } else {
                            if ("".contentEquals(txtEmail.getText())) {
                                JOptionPane.showMessageDialog(null, "El campo E-mail no puede estar vacío.", "Error", HEIGHT);
                            } else {
                                if ("".contentEquals(txtTelefono.getText())) {
                                    JOptionPane.showMessageDialog(null, "El campo Teléfono no puede estar vacío.", "Error", HEIGHT);
                                } else {
                                    if ("".contentEquals(txtNIT.getText())) {
                                        JOptionPane.showMessageDialog(null, "El campo NIT no puede estar vacío.", "Error", HEIGHT);
                                    } else {
                                        int opc = BuscarCliente(Integer.parseInt(txtCodigo.getText()));
                                        if (opc == 1) {
                                            clsCliente miCliente = new clsCliente();
                                            miCliente.setCodigoCliente(Integer.parseInt(txtCodigo.getText()));
                                            miCliente.setDpiCliente(txtDPI.getText());
                                            miCliente.setNombresCliente(txtNombres.getText());
                                            miCliente.setApellidosCliente(txtApellidos.getText().toString());
                                            miCliente.setDireccionCliente(txtDireccion.getText());
                                            miCliente.setEmailCliente(txtEmail.getText());
                                            miCliente.setTelefonoCliente(txtTelefono.getText());
                                            miCliente.setNitCliente(txtNIT.getText());
                                            miCliente.Modificar();
                                            CargarDatosTabla();
                                            JOptionPane.showMessageDialog(null, "Cliente modificado correctamente.", "Aviso", HEIGHT);
                                            LimpiarControles();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Cliente no existe.", "Error", HEIGHT);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        try {
            if ("".contentEquals(txtCodigo.getText())) {
                JOptionPane.showMessageDialog(null, "El campo Código no puede estar vacío.", "Error", HEIGHT);
            } else {
                int opc = BuscarCliente(Integer.parseInt(txtCodigo.getText()));
                if (opc == 1) {
                    clsCliente miCliente = new clsCliente();
                    miCliente.setCodigoCliente(Integer.parseInt(txtCodigo.getText()));
                    miCliente.Eliminar();
                    CargarDatosTabla();
                    JOptionPane.showMessageDialog(null, "Cliente eliminado correctamente", "Aviso", HEIGHT);
                    LimpiarControles();
                } else {
                    JOptionPane.showMessageDialog(null, "Cliente no existe.", "Error", HEIGHT);
                }
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Sistema", HEIGHT);

        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        LimpiarControles();
        CargarDatosTabla();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void tblClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClientesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblClientesMouseClicked

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblClientes;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtDPI;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNIT;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    private void EncontrarCliente(int parseInt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        
        clsConectarBD miConexion = new clsConectarBD();
        Connection con = null;
        try {
            ResultSet rs;
            Statement st;
            String cliBuscado = null;
            String cadSQL = "SELECT * FROM TCLIENTE WHERE Codigo=" + cliBuscado;
            if (miConexion.getConexion() != null) {
                con = miConexion.getConexion();
                st = con.createStatement();
                rs = st.executeQuery(cadSQL);
                Object[] miCliente = new Object[8];
                String[] titulos = {"Codigo", "DPI", "Nombres", "Apellidos", "Dirección", "E-mail", "Teléfono", "NIT"};
                DefaultTableModel miModelo = new DefaultTableModel(null, titulos);
                miModelo = (DefaultTableModel) tblClientes.getModel();
                LimpiarTabla(miModelo);
                while (rs.next()) {
                    miCliente[0] = rs.getInt("Codigo");
                    miCliente[1] = rs.getString("DPI");
                    miCliente[2] = rs.getString("Nombres");
                    miCliente[3] = rs.getString("Apellidos");
                    miCliente[4] = rs.getString("Dirección");
                    miCliente[5] = rs.getString("E-mail");
                    miCliente[6] = rs.getString("Teléfono");
                    miCliente[7] = rs.getString("NIT");
                    miModelo.addRow(miCliente);
                }
                tblClientes.setModel(miModelo);
                if (tblClientes.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(null, "Cliente no existe.", "Error", HEIGHT);
                    CargarDatosTabla();
                    LimpiarControles();
                } else {
                    txtDPI.setText(miCliente[1].toString());
                    txtNombres.setText(miCliente[2].toString());
                    txtApellidos.setText(miCliente[3].toString());
                    txtDireccion.setText(miCliente[4].toString());
                    txtEmail.setText(miCliente[5].toString());
                    txtTelefono.setText(miCliente[6].toString());
                    txtNIT.setText(miCliente[7].toString());
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay conexión con la base de datos", "Error", HEIGHT);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", HEIGHT);
        }
        
    }

    private void CargarDatosTabla() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        
        clsConectarBD miConexion = new clsConectarBD();
        Connection con = null;
        try {
            ResultSet rs;
            Statement st;
            String cadSQL = "SELECT * FROM TCLIENTE";
            if (miConexion.getConexion() != null) {
                con = miConexion.getConexion();
                st = con.createStatement();
                rs = st.executeQuery(cadSQL);
                Object[] miCliente = new Object[8];
                String[] titulos = {"Codigo", "DPI", "Nombres", "Apellidos", "Dirección", "E-mail", "Teléfono", "NIT"};
                DefaultTableModel miModelo = new DefaultTableModel(null, titulos);
                miModelo = (DefaultTableModel) tblClientes.getModel();
                LimpiarTabla(miModelo);
                while (rs.next()) {
                    miCliente[0] = rs.getInt("Codigo");
                    miCliente[1] = rs.getString("DPI");
                    miCliente[2] = rs.getString("Nombres");
                    miCliente[3] = rs.getString("Apellidos");
                    miCliente[4] = rs.getString("Dirección");
                    miCliente[5] = rs.getString("E-mail");
                    miCliente[6] = rs.getString("Teléfono");
                    miCliente[7] = rs.getString("NIT");
                    miModelo.addRow(miCliente);
                }
                tblClientes.setModel(miModelo);
            } else {
                JOptionPane.showMessageDialog(null, "No hay conexión con la base de datos", "Error", HEIGHT);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", HEIGHT);
        }
        
    }

    private void LimpiarControles() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        
        txtCodigo.setText("");
        txtDPI.setText("");
        txtNombres.setText("");
        txtApellidos.setText("");
        txtDireccion.setText("");
        txtEmail.setText("");
        txtTelefono.setText("");
        txtNIT.setText("");
        
    }

    private int BuscarCliente(int parseInt) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        
        clsConectarBD miConexion = new clsConectarBD();
        Connection con = null;
        int opc = 0;
        try {
            ResultSet rs;
            Statement st;
            String cliBuscado = null;
            String cadSQL = "SELECT * FROM TCLIENTE WHERE Codigo=" + cliBuscado;
            if (miConexion.getConexion() != null) {
                con = miConexion.getConexion();
                st = con.createStatement();
                rs = st.executeQuery(cadSQL);
                if (rs.next()) {
                    opc = 1;
                } else {
                    opc = 0;
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay conexión con la base de datos", "Error", HEIGHT);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", HEIGHT);
        }
        return opc;
    }

    private void LimpiarTabla(DefaultTableModel miModelo) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        
        for (int i = 0; i < tblClientes.getRowCount(); i++) {
            miModelo.removeRow(i);
            i = i - 1;
        }
        
    }
}
